name: CI

on:
  push:
  pull_request:

env:
  OUTPUT_INDEX: fpm_package_index.json

jobs:
  Build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        gcc_v: [9] # Version of GFortran we want to use.
    env:
      FC: gfortran
      GCC_V: ${{ matrix.gcc_v }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v1

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test TOML syntax
      run: |
        python load_registry.py

    - name: Check index
      if: ${{ github.event_name == 'pull_request' }}
      run: python build_index.py --check-new

    - name: Build index
      if: ${{ github.event_name == 'push' }}
      run: python build_index.py --check-all

    - name: Upload index
      if: ${{ github.event_name == 'push' }}
      uses: actions/upload-artifact@v2
      with:
        name: fpm_registry_index.json
        path: index.json

  # Inspired from https://github.com/endless-sky/endless-sky
  Deploy:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs:
      - Build

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_TAG: current
      OUTPUT_INDEX: fpm_package_index.json

    steps:
    - name: Checkout code
      uses: actions/checkout@v1

    - name: Install github-release
      run: |
        go get github.com/github-release/github-release
        echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Set environment variables
      run: |
        echo "GITHUB_USER=$( echo ${{ github.repository }} | cut -d/ -f1 )" >> $GITHUB_ENV
        echo "GITHUB_REPO=$( echo ${{ github.repository }} | cut -d/ -f2 )" >> $GITHUB_ENV

    - name: Move/Create continuous tag
      run: |
        git tag --force ${{ env.RELEASE_TAG }} ${{ github.sha }}
        git push --tags --force

    - name: Get Time
      run: echo "TIME=$(date -u '+%Y/%m/%d, %H:%M')" >> $GITHUB_ENV

    - name: Check continuous release status
      run: |
        if ! github-release info -t ${{ env.RELEASE_TAG }} > /dev/null 2>&1; then
          echo "RELEASE_COMMAND=release" >> $GITHUB_ENV
        else
          echo "RELEASE_COMMAND=edit" >> $GITHUB_ENV
        fi

    - name: Setup continuous release
      run: >-
        github-release ${{ env.RELEASE_COMMAND }}
        --tag ${{ env.RELEASE_TAG }}
        --name "Current registry index"
        --description "$DESCRIPTION"
        --pre-release
      env:
        DESCRIPTION: |
          Created on ${{ env.TIME }} UTC by @${{ github.actor }} with commit ${{ github.sha }}.
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        path: ${{ github.workspace }} # This will download all files

    - name: Add ${{ env.OUTPUT_INDEX }} to release tag
      run: >-
        github-release upload
        --tag ${{ env.RELEASE_TAG }}
        --replace
        --name ${{ env.OUTPUT_INDEX }}
        --file ${{ env.OUTPUT_INDEX }}/${{ env.OUTPUT_INDEX }}
